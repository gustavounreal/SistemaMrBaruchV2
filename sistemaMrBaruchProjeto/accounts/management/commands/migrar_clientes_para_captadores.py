"""
Comando para migrar usu√°rios do grupo 'cliente' para 'captador'
exceto aqueles que foram criados automaticamente via vendas
(que t√™m refer√™ncia em Cliente.usuario_portal)

Uso: python manage.py migrar_clientes_para_captadores
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group
from django.contrib.auth import get_user_model

User = get_user_model()


class Command(BaseCommand):
    help = 'Migra usu√°rios do grupo cliente para captador (exceto clientes de vendas)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Apenas simula a migra√ß√£o sem aplicar mudan√ßas',
        )

    def handle(self, *args, **options):
        dry_run = options.get('dry_run', False)
        
        self.stdout.write(self.style.WARNING('=' * 70))
        self.stdout.write(self.style.WARNING('MIGRA√á√ÉO DE GRUPOS: cliente ‚Üí captador'))
        self.stdout.write(self.style.WARNING('=' * 70))
        
        if dry_run:
            self.stdout.write(self.style.NOTICE('\n‚ö†Ô∏è  MODO DRY-RUN (simula√ß√£o) - Nenhuma altera√ß√£o ser√° feita\n'))
        
        # Obter grupos
        try:
            grupo_cliente = Group.objects.get(name='cliente')
        except Group.DoesNotExist:
            self.stdout.write(self.style.ERROR('‚ùå Grupo "cliente" n√£o encontrado!'))
            return
        
        grupo_captador, created = Group.objects.get_or_create(name='captador')
        if created:
            self.stdout.write(self.style.SUCCESS('‚úÖ Grupo "captador" criado'))
        
        # Buscar usu√°rios no grupo 'cliente'
        usuarios_clientes = User.objects.filter(groups=grupo_cliente)
        total_usuarios = usuarios_clientes.count()
        
        self.stdout.write(f'\nüìä Total de usu√°rios no grupo "cliente": {total_usuarios}\n')
        
        if total_usuarios == 0:
            self.stdout.write(self.style.SUCCESS('‚úÖ Nenhum usu√°rio para migrar.'))
            return
        
        # Separar usu√°rios
        usuarios_para_migrar = []
        usuarios_clientes_reais = []
        
        from clientes.models import Cliente
        
        for user in usuarios_clientes:
            # Verificar se √© um cliente real (tem refer√™ncia em Cliente.usuario_portal)
            is_cliente_real = Cliente.objects.filter(usuario_portal=user).exists()
            
            if is_cliente_real:
                usuarios_clientes_reais.append(user)
            else:
                usuarios_para_migrar.append(user)
        
        self.stdout.write(f'üë• Clientes reais (permanecem no grupo "cliente"): {len(usuarios_clientes_reais)}')
        self.stdout.write(f'üîÑ Usu√°rios a migrar para "captador": {len(usuarios_para_migrar)}\n')
        
        # Listar usu√°rios a migrar
        if usuarios_para_migrar:
            self.stdout.write(self.style.WARNING('Usu√°rios que ser√£o migrados:'))
            for user in usuarios_para_migrar:
                nome_completo = f"{user.first_name} {user.last_name}".strip() or user.username
                self.stdout.write(f'  ‚Ä¢ {nome_completo} (@{user.username}) - {user.email}')
        
        # Listar clientes reais que permanecer√£o
        if usuarios_clientes_reais:
            self.stdout.write(self.style.SUCCESS('\nClientes reais que permanecer√£o no grupo "cliente":'))
            for user in usuarios_clientes_reais:
                nome_completo = f"{user.first_name} {user.last_name}".strip() or user.username
                self.stdout.write(f'  ‚Ä¢ {nome_completo} (@{user.username}) - {user.email}')
        
        # Confirmar migra√ß√£o
        if not dry_run and usuarios_para_migrar:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  Confirmar migra√ß√£o? (digite "sim" para continuar): '), ending='')
            confirmacao = input().strip().lower()
            
            if confirmacao != 'sim':
                self.stdout.write(self.style.ERROR('‚ùå Migra√ß√£o cancelada pelo usu√°rio.'))
                return
            
            # Executar migra√ß√£o
            self.stdout.write('\nüîÑ Migrando usu√°rios...\n')
            migrados = 0
            
            for user in usuarios_para_migrar:
                try:
                    user.groups.remove(grupo_cliente)
                    user.groups.add(grupo_captador)
                    migrados += 1
                    nome_completo = f"{user.first_name} {user.last_name}".strip() or user.username
                    self.stdout.write(self.style.SUCCESS(f'  ‚úÖ {nome_completo} (@{user.username})'))
                except Exception as e:
                    nome_completo = f"{user.first_name} {user.last_name}".strip() or user.username
                    self.stdout.write(self.style.ERROR(f'  ‚ùå {nome_completo} (@{user.username}): {e}'))
            
            self.stdout.write(self.style.SUCCESS(f'\n‚úÖ Migra√ß√£o conclu√≠da! {migrados} usu√°rios migrados.'))
        elif dry_run:
            self.stdout.write(self.style.NOTICE('\n‚úÖ Simula√ß√£o conclu√≠da. Use sem --dry-run para aplicar.'))
        else:
            self.stdout.write(self.style.SUCCESS('\n‚úÖ Nenhum usu√°rio precisa ser migrado.'))
